"""
Script para verificar arquivos antes da entrega
Lista todos os arquivos que devem ser enviados no Moodle

IMPORTANTE: Execute este script da pasta raiz do projeto:
  cd ..
  python scripts/verificar_entrega.py
"""

import os
from pathlib import Path

def check_files():
    """Verifica quais arquivos est√£o prontos para entrega"""
    
    print("=" * 70)
    print("üì¶ VERIFICA√á√ÉO DE ARQUIVOS PARA ENTREGA")
    print("=" * 70)
    
    # Muda para diret√≥rio raiz se estiver na pasta scripts
    if os.path.basename(os.getcwd()) == 'scripts':
        os.chdir('..')
        print("üìÅ Mudando para diret√≥rio raiz do projeto\n")
    
    # Arquivos obrigat√≥rios (com caminhos relativos)
    required_files = {
        "C√≥digo Principal": [
            "main.py",
            "simulador.py",
            "scheduler.py",
            "tasks.py",
            "config_loader.py"
        ],
        "Testes": [
            "tests/test_suite.py",
            "tests/teste_fifo_basico.txt",
            "tests/teste_round_robin.txt",
            "tests/teste_io_completo.txt",
            "tests/teste_complexo.txt"
        ],
        "Documenta√ß√£o": [
            "docs/README.md",
            "docs/GUIA_TESTES.md",
            "docs/IMPLEMENTACOES.md",
            "docs/CHECKLIST_FINAL.md",
            "docs/RESUMO_EXECUTIVO.md",
            "docs/LEIA_PRIMEIRO.txt"
        ],
        "Configura√ß√£o": [
            "requirements.txt"
        ],
        "Scripts": [
            "scripts/verificar_entrega.py"
        ]
    }
    
    # Arquivos opcionais mas recomendados
    optional_files = [
        "exemplos/exemplos-arquivo-configuracao (1).txt",
        "exemplos/nova_config.txt",
    ]
    
    # Arquivo cr√≠tico faltando
    critical_missing = ["docs/documentacao_visual.pdf"]
    
    total_found = 0
    total_required = sum(len(files) for files in required_files.values())
    
    # Verifica arquivos obrigat√≥rios
    for category, files in required_files.items():
        print(f"\nüìÅ {category}:")
        for file in files:
            if os.path.exists(file):
                size = os.path.getsize(file)
                print(f"   ‚úÖ {file:40} ({size:,} bytes)")
                total_found += 1
            else:
                print(f"   ‚ùå {file:40} (N√ÉO ENCONTRADO)")
    
    # Verifica arquivos opcionais
    print(f"\nüìÇ Arquivos Opcionais:")
    for file in optional_files:
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"   ‚ÑπÔ∏è  {file:40} ({size:,} bytes)")
    
    # Verifica arquivo cr√≠tico
    print(f"\n‚ö†Ô∏è  Arquivo Cr√≠tico Pendente:")
    for file in critical_missing:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - CRIAR ESTE ARQUIVO!")
    
    # Resumo
    print("\n" + "=" * 70)
    print(f"üìä RESUMO:")
    print(f"   Arquivos encontrados: {total_found}/{total_required}")
    print(f"   Percentual completo: {(total_found/total_required)*100:.1f}%")
    
    # Verifica arquivos compactados (n√£o devem existir!)
    print("\n" + "=" * 70)
    print("‚ö†Ô∏è  VERIFICA√á√ÉO DE ARQUIVOS COMPACTADOS (N√ÉO DEVE TER NENHUM!):")
    compressed_extensions = ['.zip', '.rar', '.7z', '.tar', '.gz']
    found_compressed = []
    
    for file in os.listdir('.'):
        if any(file.endswith(ext) for ext in compressed_extensions):
            found_compressed.append(file)
    
    if found_compressed:
        print("   ‚ùå ATEN√á√ÉO! Arquivos compactados encontrados:")
        for file in found_compressed:
            print(f"      - {file}")
        print("   ‚ö†Ô∏è  REMOVA-OS! Envio de arquivos compactados = NOTA ZERO")
    else:
        print("   ‚úÖ Nenhum arquivo compactado encontrado (correto!)")
    
    # Instru√ß√µes finais
    print("\n" + "=" * 70)
    print("üìù PR√ìXIMOS PASSOS:")
    print("=" * 70)
    
    if total_found == total_required and not os.path.exists("docs/documentacao_visual.pdf"):
        print("1. ‚ö†Ô∏è  CRIAR 'docs/documentacao_visual.pdf' com screenshots")
        print("2. ‚úÖ Executar este script novamente para verificar")
        print("3. ‚úÖ Enviar TODOS os arquivos INDIVIDUALMENTE no Moodle")
        print("4. ‚ùå N√ÉO comprimir os arquivos!")
    elif total_found == total_required and os.path.exists("docs/documentacao_visual.pdf"):
        print("‚úÖ TUDO PRONTO PARA ENTREGA!")
        print("\nüì§ INSTRU√á√ïES DE ENVIO:")
        print("   1. Acesse o Moodle")
        print("   2. Encontre a atividade de entrega do projeto")
        print("   3. Envie CADA arquivo INDIVIDUALMENTE (n√£o comprimir!)")
        print("   4. Verifique que todos os arquivos foram enviados")
        print("   5. Confirme a entrega")
    else:
        print("‚ùå Alguns arquivos est√£o faltando!")
        print("   Verifique os itens marcados com ‚ùå acima")
    
    print("\n" + "=" * 70)
    print("üìÇ Estrutura do Projeto:")
    print("=" * 70)
    print("  ProjSO/")
    print("  ‚îú‚îÄ‚îÄ *.py ................... C√≥digo principal")
    print("  ‚îú‚îÄ‚îÄ requirements.txt ....... Depend√™ncias")
    print("  ‚îú‚îÄ‚îÄ docs/ .................. Documenta√ß√£o")
    print("  ‚îú‚îÄ‚îÄ tests/ ................. Testes")
    print("  ‚îú‚îÄ‚îÄ exemplos/ .............. Exemplos de configura√ß√£o")
    print("  ‚îî‚îÄ‚îÄ scripts/ ............... Scripts utilit√°rios")
    print("=" * 70)

if __name__ == "__main__":
    check_files()
